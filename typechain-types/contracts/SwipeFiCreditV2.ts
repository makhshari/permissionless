/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SwipeFiCreditV2 {
  export type TransactionStruct = {
    id: BigNumberish;
    user: AddressLike;
    merchant: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    purpose: string;
    isRepayment: boolean;
    dueDate: BigNumberish;
    isPaid: boolean;
  };

  export type TransactionStructOutput = [
    id: bigint,
    user: string,
    merchant: string,
    amount: bigint,
    timestamp: bigint,
    purpose: string,
    isRepayment: boolean,
    dueDate: bigint,
    isPaid: boolean
  ] & {
    id: bigint;
    user: string;
    merchant: string;
    amount: bigint;
    timestamp: bigint;
    purpose: string;
    isRepayment: boolean;
    dueDate: bigint;
    isPaid: boolean;
  };

  export type UserCreditStruct = {
    maxCreditLimit: BigNumberish;
    availableCredit: BigNumberish;
    outstandingBalance: BigNumberish;
    creditScore: BigNumberish;
    lastPaymentDate: BigNumberish;
    lastSpendDate: BigNumberish;
    isActive: boolean;
    totalSpent: BigNumberish;
    totalRepaid: BigNumberish;
    lateFeesAccrued: BigNumberish;
    interestAccrued: BigNumberish;
  };

  export type UserCreditStructOutput = [
    maxCreditLimit: bigint,
    availableCredit: bigint,
    outstandingBalance: bigint,
    creditScore: bigint,
    lastPaymentDate: bigint,
    lastSpendDate: bigint,
    isActive: boolean,
    totalSpent: bigint,
    totalRepaid: bigint,
    lateFeesAccrued: bigint,
    interestAccrued: bigint
  ] & {
    maxCreditLimit: bigint;
    availableCredit: bigint;
    outstandingBalance: bigint;
    creditScore: bigint;
    lastPaymentDate: bigint;
    lastSpendDate: bigint;
    isActive: boolean;
    totalSpent: bigint;
    totalRepaid: bigint;
    lateFeesAccrued: bigint;
    interestAccrued: bigint;
  };
}

export interface SwipeFiCreditV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "ANNUAL_INTEREST_RATE"
      | "LATE_FEE_RATE"
      | "MAX_CREDIT_LIMIT"
      | "MAX_CREDIT_SCORE"
      | "MIN_CREDIT_LIMIT"
      | "MIN_CREDIT_SCORE"
      | "MIN_PAYMENT_PERCENTAGE"
      | "REPAYMENT_PERIOD_DAYS"
      | "calculateAccruedCharges"
      | "creditFactors"
      | "getContractStats"
      | "getTransaction"
      | "getUserCreditProfile"
      | "getUserTransactions"
      | "merchants"
      | "owner"
      | "registerMerchant"
      | "renounceOwnership"
      | "repay"
      | "setMerchantWhitelist"
      | "setUserCreditStatus"
      | "setupUserCredit"
      | "spend"
      | "transactions"
      | "transferOwnership"
      | "usdcToken"
      | "userCredits"
      | "userTransactionIds"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreditLimitSet"
      | "CreditRepaid"
      | "CreditScoreUpdated"
      | "CreditSpent"
      | "InterestAccrued"
      | "LateFeeAccrued"
      | "MerchantRegistered"
      | "MerchantWhitelisted"
      | "OwnershipTransferred"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ANNUAL_INTEREST_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LATE_FEE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CREDIT_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CREDIT_SCORE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_CREDIT_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_CREDIT_SCORE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PAYMENT_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPAYMENT_PERIOD_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAccruedCharges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditFactors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCreditProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTransactions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "merchants",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerMerchant",
    values: [AddressLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setMerchantWhitelist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserCreditStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setupUserCredit",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spend",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userCredits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTransactionIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ANNUAL_INTEREST_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LATE_FEE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CREDIT_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CREDIT_SCORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CREDIT_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CREDIT_SCORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PAYMENT_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPAYMENT_PERIOD_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAccruedCharges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCreditProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merchants", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerMerchant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMerchantWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserCreditStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupUserCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTransactionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CreditLimitSetEvent {
  export type InputTuple = [
    user: AddressLike,
    limit: BigNumberish,
    creditScore: BigNumberish
  ];
  export type OutputTuple = [user: string, limit: bigint, creditScore: bigint];
  export interface OutputObject {
    user: string;
    limit: bigint;
    creditScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditRepaidEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    transactionId: bigint,
    user: string,
    amount: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    transactionId: bigint;
    user: string;
    amount: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditScoreUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    newScore: BigNumberish,
    factors: BigNumberish
  ];
  export type OutputTuple = [user: string, newScore: bigint, factors: bigint];
  export interface OutputObject {
    user: string;
    newScore: bigint;
    factors: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditSpentEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    user: AddressLike,
    merchant: AddressLike,
    amount: BigNumberish,
    purpose: string,
    dueDate: BigNumberish
  ];
  export type OutputTuple = [
    transactionId: bigint,
    user: string,
    merchant: string,
    amount: bigint,
    purpose: string,
    dueDate: bigint
  ];
  export interface OutputObject {
    transactionId: bigint;
    user: string;
    merchant: string;
    amount: bigint;
    purpose: string;
    dueDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterestAccruedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LateFeeAccruedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    dueDate: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, dueDate: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    dueDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MerchantRegisteredEvent {
  export type InputTuple = [
    merchant: AddressLike,
    name: string,
    category: string
  ];
  export type OutputTuple = [merchant: string, name: string, category: string];
  export interface OutputObject {
    merchant: string;
    name: string;
    category: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MerchantWhitelistedEvent {
  export type InputTuple = [merchant: AddressLike, status: boolean];
  export type OutputTuple = [merchant: string, status: boolean];
  export interface OutputObject {
    merchant: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwipeFiCreditV2 extends BaseContract {
  connect(runner?: ContractRunner | null): SwipeFiCreditV2;
  waitForDeployment(): Promise<this>;

  interface: SwipeFiCreditV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ANNUAL_INTEREST_RATE: TypedContractMethod<[], [bigint], "view">;

  LATE_FEE_RATE: TypedContractMethod<[], [bigint], "view">;

  MAX_CREDIT_LIMIT: TypedContractMethod<[], [bigint], "view">;

  MAX_CREDIT_SCORE: TypedContractMethod<[], [bigint], "view">;

  MIN_CREDIT_LIMIT: TypedContractMethod<[], [bigint], "view">;

  MIN_CREDIT_SCORE: TypedContractMethod<[], [bigint], "view">;

  MIN_PAYMENT_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  REPAYMENT_PERIOD_DAYS: TypedContractMethod<[], [bigint], "view">;

  calculateAccruedCharges: TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint] & { interest: bigint; lateFees: bigint }],
    "view"
  >;

  creditFactors: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        transactionHistory: bigint;
        paymentHistory: bigint;
        creditUtilization: bigint;
        accountAge: bigint;
        onchainActivity: bigint;
      }
    ],
    "view"
  >;

  getContractStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalUsers: bigint;
        totalVolume: bigint;
        totalOutstanding: bigint;
        totalMerchants: bigint;
      }
    ],
    "view"
  >;

  getTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [SwipeFiCreditV2.TransactionStructOutput],
    "view"
  >;

  getUserCreditProfile: TypedContractMethod<
    [user: AddressLike],
    [
      [SwipeFiCreditV2.UserCreditStructOutput, bigint[], bigint, bigint] & {
        credit: SwipeFiCreditV2.UserCreditStructOutput;
        transactionIds: bigint[];
        accruedInterest: bigint;
        accruedLateFees: bigint;
      }
    ],
    "view"
  >;

  getUserTransactions: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  merchants: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint, bigint] & {
        name: string;
        category: string;
        isWhitelisted: boolean;
        maxTransactionLimit: bigint;
        totalVolume: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerMerchant: TypedContractMethod<
    [
      merchant: AddressLike,
      name: string,
      category: string,
      maxTransactionLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repay: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  setMerchantWhitelist: TypedContractMethod<
    [merchant: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  setUserCreditStatus: TypedContractMethod<
    [user: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  setupUserCredit: TypedContractMethod<
    [
      user: AddressLike,
      requestedLimit: BigNumberish,
      onchainActivity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  spend: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, purpose: string],
    [void],
    "nonpayable"
  >;

  transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        boolean,
        bigint,
        boolean
      ] & {
        id: bigint;
        user: string;
        merchant: string;
        amount: bigint;
        timestamp: bigint;
        purpose: string;
        isRepayment: boolean;
        dueDate: bigint;
        isPaid: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  userCredits: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        maxCreditLimit: bigint;
        availableCredit: bigint;
        outstandingBalance: bigint;
        creditScore: bigint;
        lastPaymentDate: bigint;
        lastSpendDate: bigint;
        isActive: boolean;
        totalSpent: bigint;
        totalRepaid: bigint;
        lateFeesAccrued: bigint;
        interestAccrued: bigint;
      }
    ],
    "view"
  >;

  userTransactionIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ANNUAL_INTEREST_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LATE_FEE_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CREDIT_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CREDIT_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_CREDIT_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_CREDIT_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PAYMENT_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REPAYMENT_PERIOD_DAYS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateAccruedCharges"
  ): TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint] & { interest: bigint; lateFees: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "creditFactors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        transactionHistory: bigint;
        paymentHistory: bigint;
        creditUtilization: bigint;
        accountAge: bigint;
        onchainActivity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalUsers: bigint;
        totalVolume: bigint;
        totalOutstanding: bigint;
        totalMerchants: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransaction"
  ): TypedContractMethod<
    [transactionId: BigNumberish],
    [SwipeFiCreditV2.TransactionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCreditProfile"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [SwipeFiCreditV2.UserCreditStructOutput, bigint[], bigint, bigint] & {
        credit: SwipeFiCreditV2.UserCreditStructOutput;
        transactionIds: bigint[];
        accruedInterest: bigint;
        accruedLateFees: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTransactions"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "merchants"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint, bigint] & {
        name: string;
        category: string;
        isWhitelisted: boolean;
        maxTransactionLimit: bigint;
        totalVolume: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerMerchant"
  ): TypedContractMethod<
    [
      merchant: AddressLike,
      name: string,
      category: string,
      maxTransactionLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMerchantWhitelist"
  ): TypedContractMethod<
    [merchant: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUserCreditStatus"
  ): TypedContractMethod<
    [user: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setupUserCredit"
  ): TypedContractMethod<
    [
      user: AddressLike,
      requestedLimit: BigNumberish,
      onchainActivity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spend"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, purpose: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        boolean,
        bigint,
        boolean
      ] & {
        id: bigint;
        user: string;
        merchant: string;
        amount: bigint;
        timestamp: bigint;
        purpose: string;
        isRepayment: boolean;
        dueDate: bigint;
        isPaid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userCredits"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        maxCreditLimit: bigint;
        availableCredit: bigint;
        outstandingBalance: bigint;
        creditScore: bigint;
        lastPaymentDate: bigint;
        lastSpendDate: bigint;
        isActive: boolean;
        totalSpent: bigint;
        totalRepaid: bigint;
        lateFeesAccrued: bigint;
        interestAccrued: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTransactionIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CreditLimitSet"
  ): TypedContractEvent<
    CreditLimitSetEvent.InputTuple,
    CreditLimitSetEvent.OutputTuple,
    CreditLimitSetEvent.OutputObject
  >;
  getEvent(
    key: "CreditRepaid"
  ): TypedContractEvent<
    CreditRepaidEvent.InputTuple,
    CreditRepaidEvent.OutputTuple,
    CreditRepaidEvent.OutputObject
  >;
  getEvent(
    key: "CreditScoreUpdated"
  ): TypedContractEvent<
    CreditScoreUpdatedEvent.InputTuple,
    CreditScoreUpdatedEvent.OutputTuple,
    CreditScoreUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CreditSpent"
  ): TypedContractEvent<
    CreditSpentEvent.InputTuple,
    CreditSpentEvent.OutputTuple,
    CreditSpentEvent.OutputObject
  >;
  getEvent(
    key: "InterestAccrued"
  ): TypedContractEvent<
    InterestAccruedEvent.InputTuple,
    InterestAccruedEvent.OutputTuple,
    InterestAccruedEvent.OutputObject
  >;
  getEvent(
    key: "LateFeeAccrued"
  ): TypedContractEvent<
    LateFeeAccruedEvent.InputTuple,
    LateFeeAccruedEvent.OutputTuple,
    LateFeeAccruedEvent.OutputObject
  >;
  getEvent(
    key: "MerchantRegistered"
  ): TypedContractEvent<
    MerchantRegisteredEvent.InputTuple,
    MerchantRegisteredEvent.OutputTuple,
    MerchantRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MerchantWhitelisted"
  ): TypedContractEvent<
    MerchantWhitelistedEvent.InputTuple,
    MerchantWhitelistedEvent.OutputTuple,
    MerchantWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "CreditLimitSet(address,uint256,uint256)": TypedContractEvent<
      CreditLimitSetEvent.InputTuple,
      CreditLimitSetEvent.OutputTuple,
      CreditLimitSetEvent.OutputObject
    >;
    CreditLimitSet: TypedContractEvent<
      CreditLimitSetEvent.InputTuple,
      CreditLimitSetEvent.OutputTuple,
      CreditLimitSetEvent.OutputObject
    >;

    "CreditRepaid(uint256,address,uint256,uint256)": TypedContractEvent<
      CreditRepaidEvent.InputTuple,
      CreditRepaidEvent.OutputTuple,
      CreditRepaidEvent.OutputObject
    >;
    CreditRepaid: TypedContractEvent<
      CreditRepaidEvent.InputTuple,
      CreditRepaidEvent.OutputTuple,
      CreditRepaidEvent.OutputObject
    >;

    "CreditScoreUpdated(address,uint256,uint256)": TypedContractEvent<
      CreditScoreUpdatedEvent.InputTuple,
      CreditScoreUpdatedEvent.OutputTuple,
      CreditScoreUpdatedEvent.OutputObject
    >;
    CreditScoreUpdated: TypedContractEvent<
      CreditScoreUpdatedEvent.InputTuple,
      CreditScoreUpdatedEvent.OutputTuple,
      CreditScoreUpdatedEvent.OutputObject
    >;

    "CreditSpent(uint256,address,address,uint256,string,uint256)": TypedContractEvent<
      CreditSpentEvent.InputTuple,
      CreditSpentEvent.OutputTuple,
      CreditSpentEvent.OutputObject
    >;
    CreditSpent: TypedContractEvent<
      CreditSpentEvent.InputTuple,
      CreditSpentEvent.OutputTuple,
      CreditSpentEvent.OutputObject
    >;

    "InterestAccrued(address,uint256)": TypedContractEvent<
      InterestAccruedEvent.InputTuple,
      InterestAccruedEvent.OutputTuple,
      InterestAccruedEvent.OutputObject
    >;
    InterestAccrued: TypedContractEvent<
      InterestAccruedEvent.InputTuple,
      InterestAccruedEvent.OutputTuple,
      InterestAccruedEvent.OutputObject
    >;

    "LateFeeAccrued(address,uint256,uint256)": TypedContractEvent<
      LateFeeAccruedEvent.InputTuple,
      LateFeeAccruedEvent.OutputTuple,
      LateFeeAccruedEvent.OutputObject
    >;
    LateFeeAccrued: TypedContractEvent<
      LateFeeAccruedEvent.InputTuple,
      LateFeeAccruedEvent.OutputTuple,
      LateFeeAccruedEvent.OutputObject
    >;

    "MerchantRegistered(address,string,string)": TypedContractEvent<
      MerchantRegisteredEvent.InputTuple,
      MerchantRegisteredEvent.OutputTuple,
      MerchantRegisteredEvent.OutputObject
    >;
    MerchantRegistered: TypedContractEvent<
      MerchantRegisteredEvent.InputTuple,
      MerchantRegisteredEvent.OutputTuple,
      MerchantRegisteredEvent.OutputObject
    >;

    "MerchantWhitelisted(address,bool)": TypedContractEvent<
      MerchantWhitelistedEvent.InputTuple,
      MerchantWhitelistedEvent.OutputTuple,
      MerchantWhitelistedEvent.OutputObject
    >;
    MerchantWhitelisted: TypedContractEvent<
      MerchantWhitelistedEvent.InputTuple,
      MerchantWhitelistedEvent.OutputTuple,
      MerchantWhitelistedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Withdrawal(address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
